pipeline {
  agent any

  environment {
    IMAGE_NAME = 'user-service'
    DOCKER_CREDENTIALS = credentials('docker-credential')
    GITHUB_CREDENTIALS = credentials('github-credential')
    SSH_KEY = credentials('ssh-key')
    HOST = credentials('host')
    USERNAME = credentials('username')
    CONSUL_HTTP_URL = credentials('consul-http-url')
    CONSUL_HTTP_KEY = "backend/user-service"
    CONSUL_HTTP_TOKEN = credentials('consul-http-token')
    CONSUL_WATCH_INTERVAL_SECONDS = 60
  }


  stages {
    stage('Check Commit Message') {
      steps {
        script {
          def commitMessage = sh(
            script: "git log -1 --pretty=%B",
            returnStdout: true
          ).trim()

          echo "Commit Message: ${commitMessage}"
          if (commitMessage.contains("[skip ci]")) {
            echo "Skipping pipeline due to [skip ci] tag in commit message."
            currentBuild.result = 'ABORTED'
            currentBuild.delete()
            return
          }

          echo "Pipeline will continue. No [skip ci] tag found in commit message."
        }
      }
    }

    stage('Set Target Branch') {
      steps {
        script {
          echo "GIT_BRANCH: ${env.GIT_BRANCH}"
          if (env.GIT_BRANCH == 'origin/main') {
            env.TARGET_BRANCH = 'main'
          } else if (env.GIT_BRANCH == 'origin/development') {
            env.TARGET_BRANCH = 'development'
          }

          echo "TARGET_BRANCH: ${env.TARGET_BRANCH}"
        }
      }
    }

    stage('Checkout Code') {
      steps {
        script {
          def repoUrl = 'https://github.com/terenjit/minisoccer-services.git'

          checkout([$class: 'GitSCM',
            branches: [
              [name: "*/${env.TARGET_BRANCH}"]
            ],
            userRemoteConfigs: [
              [url: repoUrl, credentialsId: 'github-credential']
            ]
          ])

        }
      }
    }

    stage('Login to Docker Hub') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'docker-credential', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
            sh """
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            """
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        dir('user-service') {
            script {
                def runNumber = currentBuild.number
                sh "docker build -t ${DOCKER_CREDENTIALS_USR}/${IMAGE_NAME}:${runNumber} ."
                sh "docker push ${DOCKER_CREDENTIALS_USR}/${IMAGE_NAME}:${runNumber}"
            }
        }
      }
    }

    stage('Update docker-compose.yaml') {
      steps {
        dir('user-service') {
            script {
                def runNumber = currentBuild.number
                sh "sed -i 's|image: ${DOCKER_CREDENTIALS_USR}/${IMAGE_NAME}:[0-9]\\+|image: ${DOCKER_CREDENTIALS_USR}/${IMAGE_NAME}:${runNumber}|' docker-compose.yaml"
            }
        }
      }
    }

    stage('Commit and Push Changes') {
      steps {
         dir('user-service') {
            script {
                sh """
                git config --global user.name 'Jenkins CI'
                git config --global user.email 'jenkins@company.com'
                git remote set-url origin https://${GITHUB_CREDENTIALS_USR}:${GITHUB_CREDENTIALS_PSW}@github.com/terenjit/minisoccer-services.git
                git add docker-compose.yaml
                git commit -m 'Update image version to ${TARGET_BRANCH}-${currentBuild.number} [skip ci]' || echo 'No changes to commit'
                git pull origin ${TARGET_BRANCH} --rebase
                git push origin HEAD:${TARGET_BRANCH}
                """
            }
        }
      }
    }

    stage('Deploy to Remote Server') {
      steps {
          withCredentials([
              // SSH key injected as temporary file
              sshUserPrivateKey(
                  credentialsId: 'ssh-key',      // Jenkins SSH credential ID
                  keyFileVariable: 'SSH_KEY_FILE',
                  usernameVariable: 'SSH_USER'
              ),
              // Host injected as string credential
              string(credentialsId: 'host', variable: 'HOST_VAR')
          ]) {
              script {
                  // Test connectivity first
                  sh '''
                  echo "Testing connectivity to remote server..."
                  ping -c 3 $HOST_VAR || echo "Ping failed, but continuing..."
                  '''
                  
                  // Deploy with improved SSH options
                  sh '''
                  echo "Starting deployment to remote server..."

                  ssh -o StrictHostKeyChecking=no \
                      -o ConnectTimeout=30 \
                      -o ServerAliveInterval=60 \
                      -o ServerAliveCountMax=3 \
                      -o UserKnownHostsFile=/dev/null \
                      -o LogLevel=ERROR \
                      -i $SSH_KEY_FILE $SSH_USER@$HOST_VAR '
                      set -e  # Exit on any error
                      
                      echo "Connected to remote server successfully"
                      
                      # Set target directory on remote server
                      TARGET_DIR=/home/terenjitsingh/minisoccer-microservices/user-service

                      # Create directory if it doesn'\''t exist
                      mkdir -p "$TARGET_DIR"

                      # Clone repo if not exists, else pull latest changes
                      if [ -d "$TARGET_DIR/.git" ]; then
                          echo "Directory exists. Pulling latest changes."
                          cd "$TARGET_DIR"
                          git fetch origin
                          git reset --hard origin/main
                      else
                          echo "Directory does not exist. Cloning repository."
                          git clone -b main git@github.com:terenjit/minisoccer-services.git "$TARGET_DIR"
                          cd "$TARGET_DIR"
                      fi

                      # Navigate to user-service directory
                      cd user-service

                      # Copy and update environment file
                      if [ -f .env.example ]; then
                          cp .env.example .env
                      else
                          echo "Warning: .env.example not found, creating basic .env file"
                          touch .env
                      fi
                      
                      # Update environment variables
                      sed -i "s/^TIMEZONE=.*/TIMEZONE=Asia\\/Jakarta/" .env || echo "TIMEZONE=Asia/Jakarta" >> .env
                      sed -i "s/^CONSUL_HTTP_URL=.*/CONSUL_HTTP_URL=${CONSUL_HTTP_URL}/" .env || echo "CONSUL_HTTP_URL=${CONSUL_HTTP_URL}" >> .env
                      sed -i "s/^CONSUL_HTTP_PATH=.*/CONSUL_HTTP_PATH=backend\\/user-service/" .env || echo "CONSUL_HTTP_PATH=backend/user-service" >> .env
                      sed -i "s/^CONSUL_HTTP_TOKEN=.*/CONSUL_HTTP_TOKEN=${CONSUL_HTTP_TOKEN}/" .env || echo "CONSUL_HTTP_TOKEN=${CONSUL_HTTP_TOKEN}" >> .env
                      sed -i "s/^CONSUL_WATCH_INTERVAL_SECONDS=.*/CONSUL_WATCH_INTERVAL_SECONDS=${CONSUL_WATCH_INTERVAL_SECONDS}/" .env || echo "CONSUL_WATCH_INTERVAL_SECONDS=${CONSUL_WATCH_INTERVAL_SECONDS}" >> .env

                      echo "Environment file updated successfully"

                      # Build and run Docker Compose
                      echo "Starting Docker Compose deployment..."
                      sudo docker compose down || true  # Stop existing containers
                      sudo docker compose up -d --build --force-recreate
                      
                      echo "Deployment completed successfully"
                      '
                  '''
              }
            }
        }
    }
  }
}
